!function(I,B){"object"==typeof exports&&"object"==typeof module?module.exports=B(require("VoxeetSDK")):"function"==typeof define&&define.amd?define(["VoxeetSDK"],B):"object"==typeof exports?exports.VoxeetSDKExt=B(require("VoxeetSDK")):I.VoxeetSDKExt=B(I.VoxeetSDK)}(self,(__WEBPACK_EXTERNAL_MODULE__892__=>(()=>{"use strict";var __webpack_modules__={571:function(__unused_webpack_module,exports,__webpack_require__){eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst voxeet_web_sdk_1 = __importDefault(__webpack_require__(892));\nconst createConferencing = () => {\n    const attachMediaStreamToHTMLVideoElement = (participant) => {\n        const videoNode = document.createElement('video');\n        videoNode.setAttribute('playsinline', 'true');\n        videoNode.setAttribute('autoplay', 'autoplay');\n        videoNode.muted = true;\n        navigator.attachMediaStream(videoNode, participant.streams[0]);\n        return videoNode;\n    };\n    const switchToUser = (options) => __awaiter(void 0, void 0, void 0, function* () {\n        if (!voxeet_web_sdk_1.default.session.participant) {\n            return Promise.reject('A session is not opened.');\n        }\n        if (voxeet_web_sdk_1.default.session.participant.type === 'user') {\n            return Promise.reject('Already joined as a USER.');\n        }\n        if (!voxeet_web_sdk_1.default.conference.current) {\n            return Promise.reject('You must be connected to a conference.');\n        }\n        const confId = voxeet_web_sdk_1.default.conference.current.id;\n        return voxeet_web_sdk_1.default.conference\n            .leave()\n            .then(() => voxeet_web_sdk_1.default.conference.fetch(confId))\n            .then((conf) => voxeet_web_sdk_1.default.conference.join(conf, options));\n    });\n    const switchToListener = (options) => __awaiter(void 0, void 0, void 0, function* () {\n        if (!voxeet_web_sdk_1.default.session.participant) {\n            return Promise.reject('A session is not opened.');\n        }\n        if (voxeet_web_sdk_1.default.session.participant.type === 'listener') {\n            return Promise.reject('Already joined as a LISTENER.');\n        }\n        if (!voxeet_web_sdk_1.default.conference.current) {\n            return Promise.reject('You must be connected to a conference.');\n        }\n        const confId = voxeet_web_sdk_1.default.conference.current.id;\n        return voxeet_web_sdk_1.default.conference\n            .leave()\n            .then(() => voxeet_web_sdk_1.default.conference.fetch(confId))\n            .then((conf) => {\n            if (options) {\n                return voxeet_web_sdk_1.default.conference.listen(conf, options);\n            }\n            return voxeet_web_sdk_1.default.conference.listen(conf);\n        });\n    });\n    return {\n        attachMediaStreamToHTMLVideoElement,\n        switchToUser,\n        switchToListener,\n    };\n};\nexports[\"default\"] = createConferencing;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LFVBQVUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDN0MsQ0FBQyxDQUFDLENBQUM7SUFDWCxDQUFDLEVBQUM7SUFFRixPQUFPO1FBQ0gsbUNBQW1DO1FBQ25DLFlBQVk7UUFDWixnQkFBZ0I7S0FDbkIsQ0FBQztBQUNOLENBQUMsQ0FBQztBQUVGLHFCQUFlLGtCQUFrQixDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vVm94ZWV0U0RLRXh0Ly4vc3JjL2NvbmZlcmVuY2UudHM/MDE4OSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVm94ZWV0U0RLIGZyb20gJ0B2b3hlZXQvdm94ZWV0LXdlYi1zZGsnO1xuaW1wb3J0IHsgSm9pbk9wdGlvbnMsIExpc3Rlbk9wdGlvbnMgfSBmcm9tICdAdm94ZWV0L3ZveGVldC13ZWItc2RrL3R5cGVzL21vZGVscy9PcHRpb25zJztcbmltcG9ydCB7IFBhcnRpY2lwYW50LCBQYXJ0aWNpcGFudFR5cGUgfSBmcm9tICdAdm94ZWV0L3ZveGVldC13ZWItc2RrL3R5cGVzL21vZGVscy9QYXJ0aWNpcGFudCc7XG5cbmltcG9ydCB7IFJUQ1NoaW0gfSBmcm9tICcuL3R5cGVzL1JUQ1NoaW0nO1xuaW1wb3J0IHsgQ3JlYXRlQ29uZmVyZW5jaW5nIH0gZnJvbSAnLi90eXBlcy9Db25mZXJlbmNlJztcblxuY29uc3QgY3JlYXRlQ29uZmVyZW5jaW5nOiBDcmVhdGVDb25mZXJlbmNpbmcgPSAoKSA9PiB7XG4gICAgY29uc3QgYXR0YWNoTWVkaWFTdHJlYW1Ub0hUTUxWaWRlb0VsZW1lbnQgPSAocGFydGljaXBhbnQ6IFBhcnRpY2lwYW50KSA9PiB7XG4gICAgICAgIGNvbnN0IHZpZGVvTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3ZpZGVvJyk7XG5cbiAgICAgICAgdmlkZW9Ob2RlLnNldEF0dHJpYnV0ZSgncGxheXNpbmxpbmUnLCAndHJ1ZScpO1xuICAgICAgICB2aWRlb05vZGUuc2V0QXR0cmlidXRlKCdhdXRvcGxheScsICdhdXRvcGxheScpO1xuICAgICAgICB2aWRlb05vZGUubXV0ZWQgPSB0cnVlO1xuXG4gICAgICAgIChuYXZpZ2F0b3IgYXMgTmF2aWdhdG9yICYgUlRDU2hpbSkuYXR0YWNoTWVkaWFTdHJlYW0odmlkZW9Ob2RlLCBwYXJ0aWNpcGFudC5zdHJlYW1zWzBdKTtcblxuICAgICAgICByZXR1cm4gdmlkZW9Ob2RlO1xuICAgIH07XG5cbiAgICBjb25zdCBzd2l0Y2hUb1VzZXIgPSBhc3luYyAob3B0aW9uczogSm9pbk9wdGlvbnMpID0+IHtcbiAgICAgICAgaWYgKCFWb3hlZXRTREsuc2Vzc2lvbi5wYXJ0aWNpcGFudCkge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KCdBIHNlc3Npb24gaXMgbm90IG9wZW5lZC4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChWb3hlZXRTREsuc2Vzc2lvbi5wYXJ0aWNpcGFudC50eXBlID09PSAoJ3VzZXInIGFzIFBhcnRpY2lwYW50VHlwZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCgnQWxyZWFkeSBqb2luZWQgYXMgYSBVU0VSLicpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFWb3hlZXRTREsuY29uZmVyZW5jZS5jdXJyZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoJ1lvdSBtdXN0IGJlIGNvbm5lY3RlZCB0byBhIGNvbmZlcmVuY2UuJyk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBjb25mSWQgPSBWb3hlZXRTREsuY29uZmVyZW5jZS5jdXJyZW50LmlkO1xuXG4gICAgICAgIHJldHVybiBWb3hlZXRTREsuY29uZmVyZW5jZVxuICAgICAgICAgICAgLmxlYXZlKClcbiAgICAgICAgICAgIC50aGVuKCgpID0+IFZveGVldFNESy5jb25mZXJlbmNlLmZldGNoKGNvbmZJZCkpXG4gICAgICAgICAgICAudGhlbigoY29uZikgPT4gVm94ZWV0U0RLLmNvbmZlcmVuY2Uuam9pbihjb25mLCBvcHRpb25zKSk7XG4gICAgfTtcblxuICAgIGNvbnN0IHN3aXRjaFRvTGlzdGVuZXIgPSBhc3luYyAob3B0aW9ucz86IExpc3Rlbk9wdGlvbnMpID0+IHtcbiAgICAgICAgaWYgKCFWb3hlZXRTREsuc2Vzc2lvbi5wYXJ0aWNpcGFudCkge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KCdBIHNlc3Npb24gaXMgbm90IG9wZW5lZC4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChWb3hlZXRTREsuc2Vzc2lvbi5wYXJ0aWNpcGFudC50eXBlID09PSAoJ2xpc3RlbmVyJyBhcyBQYXJ0aWNpcGFudFR5cGUpKSB7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoJ0FscmVhZHkgam9pbmVkIGFzIGEgTElTVEVORVIuJyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIVZveGVldFNESy5jb25mZXJlbmNlLmN1cnJlbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCgnWW91IG11c3QgYmUgY29ubmVjdGVkIHRvIGEgY29uZmVyZW5jZS4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGNvbmZJZCA9IFZveGVldFNESy5jb25mZXJlbmNlLmN1cnJlbnQuaWQ7XG5cbiAgICAgICAgcmV0dXJuIFZveGVldFNESy5jb25mZXJlbmNlXG4gICAgICAgICAgICAubGVhdmUoKVxuICAgICAgICAgICAgLnRoZW4oKCkgPT4gVm94ZWV0U0RLLmNvbmZlcmVuY2UuZmV0Y2goY29uZklkKSlcbiAgICAgICAgICAgIC50aGVuKChjb25mKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFZveGVldFNESy5jb25mZXJlbmNlLmxpc3Rlbihjb25mLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gVm94ZWV0U0RLLmNvbmZlcmVuY2UubGlzdGVuKGNvbmYpO1xuICAgICAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIGF0dGFjaE1lZGlhU3RyZWFtVG9IVE1MVmlkZW9FbGVtZW50LFxuICAgICAgICBzd2l0Y2hUb1VzZXIsXG4gICAgICAgIHN3aXRjaFRvTGlzdGVuZXIsXG4gICAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUNvbmZlcmVuY2luZztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///571\n")},607:function(__unused_webpack_module,exports,__webpack_require__){eval('\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { "default": mod };\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nconst spatialAudio_1 = __importDefault(__webpack_require__(211));\nconst conference_1 = __importDefault(__webpack_require__(571));\nconst createSDKExtension = () => {\n    return {\n        conference: (0, conference_1.default)(),\n        spatialAudio: (0, spatialAudio_1.default)(),\n    };\n};\nconst extension = createSDKExtension();\nexports["default"] = extension;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjA3LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQ0EsaUVBQWdEO0FBQ2hELCtEQUE4QztBQUU5QyxNQUFNLGtCQUFrQixHQUFvQixHQUFHLEVBQUU7SUFDN0MsT0FBTztRQUNILFVBQVUsRUFBRSx3QkFBa0IsR0FBRTtRQUNoQyxZQUFZLEVBQUUsMEJBQWtCLEdBQUU7S0FDckMsQ0FBQztBQUNOLENBQUMsQ0FBQztBQUVGLE1BQU0sU0FBUyxHQUFHLGtCQUFrQixFQUFFLENBQUM7QUFDdkMscUJBQWUsU0FBUyxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vVm94ZWV0U0RLRXh0Ly4vc3JjL2luZGV4LnRzP2ZmYjQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ3JlYXRlRXh0ZW5zaW9uIH0gZnJvbSAnLi90eXBlcy9TREtFeHRlbnNpb24nO1xuaW1wb3J0IGNyZWF0ZVNwYXRpYWxBdWRpbyBmcm9tICcuL3NwYXRpYWxBdWRpbyc7XG5pbXBvcnQgY3JlYXRlQ29uZmVyZW5jaW5nIGZyb20gJy4vY29uZmVyZW5jZSc7XG5cbmNvbnN0IGNyZWF0ZVNES0V4dGVuc2lvbjogQ3JlYXRlRXh0ZW5zaW9uID0gKCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICAgIGNvbmZlcmVuY2U6IGNyZWF0ZUNvbmZlcmVuY2luZygpLFxuICAgICAgICBzcGF0aWFsQXVkaW86IGNyZWF0ZVNwYXRpYWxBdWRpbygpLFxuICAgIH07XG59O1xuXG5jb25zdCBleHRlbnNpb24gPSBjcmVhdGVTREtFeHRlbnNpb24oKTtcbmV4cG9ydCBkZWZhdWx0IGV4dGVuc2lvbjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///607\n')},211:function(__unused_webpack_module,exports,__webpack_require__){eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst voxeet_web_sdk_1 = __importDefault(__webpack_require__(892));\nconst uuid_1 = __webpack_require__(614);\nconst createSpatialAudio = () => {\n    let globalScale;\n    let globalForward;\n    let globalUp;\n    let globalRight;\n    let privateZones = new Map();\n    let participantsPositions = new Map();\n    const isInZone = (position, zone) => {\n        if (position.x < zone.origin.x || position.x > zone.origin.x + zone.dimension.x) {\n            return false;\n        }\n        if (position.y < zone.origin.y || position.y > zone.origin.y + zone.dimension.y) {\n            return false;\n        }\n        return !(position.z < zone.origin.z || position.z > zone.origin.z + zone.dimension.z);\n    };\n    const getZone = (position) => {\n        for (const [id, zone] of privateZones.entries()) {\n            if (isInZone(position, zone)) {\n                // Only return the first one\n                return [id, zone];\n            }\n        }\n        return [undefined, undefined];\n    };\n    const computeStatus = () => __awaiter(void 0, void 0, void 0, function* () {\n        // No need to compute if the local participant is not in the audio scene\n        if (voxeet_web_sdk_1.default.session.participant && !participantsPositions.has(voxeet_web_sdk_1.default.session.participant.id))\n            return;\n        // or if there are no other participants\n        if (participantsPositions.size <= 1)\n            return;\n        // Get the zone of the local participant\n        const localPosition = participantsPositions.get(voxeet_web_sdk_1.default.session.participant.id);\n        const [localZoneId, localZone] = getZone(localPosition);\n        for (const [id, participant] of voxeet_web_sdk_1.default.conference.participants) {\n            if (id === voxeet_web_sdk_1.default.session.participant.id || participant.status !== 'Connected' || !participantsPositions.has(id)) {\n                continue;\n            }\n            const remotePosition = participantsPositions.get(id);\n            const [remoteZoneId, remoteZone] = getZone(remotePosition);\n            if ((!localZone && !remoteZone) || localZoneId === remoteZoneId) {\n                // The remote participant is in same zone\n                if (!participant.audioReceivingFrom) {\n                    // Start the audio from the remote participant\n                    yield voxeet_web_sdk_1.default.conference.startAudio(participant);\n                }\n                if (participant.streams && participant.streams.find((stream) => !stream.active && stream.type === 'Camera')) {\n                    // Start the video from the remote participant\n                    try {\n                        yield voxeet_web_sdk_1.default.conference.startVideo(participant, {});\n                    }\n                    catch (error) {\n                        if (error.message.indexOf('Your conference is audio only') < 0) {\n                            throw error;\n                        }\n                    }\n                }\n            }\n            else {\n                // This participant is in a different zone\n                if (participant.audioReceivingFrom) {\n                    // Stop the audio from the remote participant\n                    yield voxeet_web_sdk_1.default.conference.stopAudio(participant);\n                }\n                if (!localZone || localZone.videoRestriction || !remoteZone || remoteZone.videoRestriction) {\n                    if (participant.streams && participant.streams.find((stream) => stream.active && stream.type === 'Camera')) {\n                        // Stop the video from the remote participant\n                        yield voxeet_web_sdk_1.default.conference.stopVideo(participant);\n                    }\n                }\n            }\n        }\n    });\n    const setSpatialEnvironment = (scale, forward, up, right) => {\n        voxeet_web_sdk_1.default.conference.setSpatialEnvironment(scale, forward, up, right);\n        globalScale = scale;\n        globalForward = forward;\n        globalUp = up;\n        globalRight = right;\n    };\n    const createPrivateZone = (zone) => __awaiter(void 0, void 0, void 0, function* () {\n        if (!zone.videoRestriction) {\n            zone.videoRestriction = false;\n        }\n        // Generate a unique identifier to retrieve the zone easily\n        const uuid = (0, uuid_1.v4)();\n        privateZones.set(uuid, zone);\n        yield computeStatus();\n        return uuid;\n    });\n    const deletePrivateZone = (id) => __awaiter(void 0, void 0, void 0, function* () {\n        if (!privateZones.has(id)) {\n            return Promise.reject(`The private zone with the id ${id} does not exist.`);\n        }\n        privateZones.delete(id);\n        yield computeStatus();\n    });\n    const updatePrivateZone = (id, zone) => __awaiter(void 0, void 0, void 0, function* () {\n        if (!privateZones.has(id)) {\n            return Promise.reject(`The private zone with the id ${id} does not exist.`);\n        }\n        if (!zone.videoRestriction) {\n            zone.videoRestriction = false;\n        }\n        privateZones.set(id, zone);\n        yield computeStatus();\n    });\n    const setSpatialPosition = (participant, position) => __awaiter(void 0, void 0, void 0, function* () {\n        if (participant.id === voxeet_web_sdk_1.default.session.participant.id && participantsPositions.has(voxeet_web_sdk_1.default.session.participant.id)) {\n            const previousPosition = participantsPositions.get(voxeet_web_sdk_1.default.session.participant.id);\n            const [previousZoneId, _] = getZone(previousPosition);\n            const [newZoneId, newZone] = getZone(position);\n            if (previousZoneId !== newZoneId) {\n                if (newZone) {\n                    voxeet_web_sdk_1.default.conference.setSpatialEnvironment(newZone.scale, globalForward, globalUp, globalRight);\n                }\n                else {\n                    voxeet_web_sdk_1.default.conference.setSpatialEnvironment(globalScale, globalForward, globalUp, globalRight);\n                }\n            }\n        }\n        voxeet_web_sdk_1.default.conference.setSpatialPosition(participant, position);\n        participantsPositions.set(participant.id, position);\n        yield computeStatus();\n    });\n    return { setSpatialEnvironment, createPrivateZone, deletePrivateZone, privateZones, updatePrivateZone, setSpatialPosition };\n};\nexports[\"default\"] = createSpatialAudio;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///211\n")},614:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"NIL\": () => (/* reexport */ nil),\n  \"parse\": () => (/* reexport */ esm_browser_parse),\n  \"stringify\": () => (/* reexport */ esm_browser_stringify),\n  \"v1\": () => (/* reexport */ esm_browser_v1),\n  \"v3\": () => (/* reexport */ esm_browser_v3),\n  \"v4\": () => (/* reexport */ esm_browser_v4),\n  \"v5\": () => (/* reexport */ esm_browser_v5),\n  \"validate\": () => (/* reexport */ esm_browser_validate),\n  \"version\": () => (/* reexport */ esm_browser_version)\n});\n\n;// CONCATENATED MODULE: ./node_modules/uuid/dist/esm-browser/rng.js\n// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nfunction rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}\n;// CONCATENATED MODULE: ./node_modules/uuid/dist/esm-browser/regex.js\n/* harmony default export */ const regex = (/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i);\n;// CONCATENATED MODULE: ./node_modules/uuid/dist/esm-browser/validate.js\n\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && regex.test(uuid);\n}\n\n/* harmony default export */ const esm_browser_validate = (validate);\n;// CONCATENATED MODULE: ./node_modules/uuid/dist/esm-browser/stringify.js\n\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!esm_browser_validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\n/* harmony default export */ const esm_browser_stringify = (stringify);\n;// CONCATENATED MODULE: ./node_modules/uuid/dist/esm-browser/v1.js\n\n // **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\n\nvar _nodeId;\n\nvar _clockseq; // Previous uuid creation time\n\n\nvar _lastMSecs = 0;\nvar _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details\n\nfunction v1(options, buf, offset) {\n  var i = buf && offset || 0;\n  var b = buf || new Array(16);\n  options = options || {};\n  var node = options.node || _nodeId;\n  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n\n  if (node == null || clockseq == null) {\n    var seedBytes = options.random || (options.rng || rng)();\n\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];\n    }\n\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n    }\n  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n\n\n  var msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n\n  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)\n\n  var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression\n\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n\n\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  } // Per 4.2.1.2 Throw error if too many uuids are requested\n\n\n  if (nsecs >= 10000) {\n    throw new Error(\"uuid.v1(): Can't create more than 10M uuids/sec\");\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n\n  msecs += 12219292800000; // `time_low`\n\n  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff; // `time_mid`\n\n  var tmh = msecs / 0x100000000 * 10000 & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff; // `time_high_and_version`\n\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n\n  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n\n  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`\n\n  b[i++] = clockseq & 0xff; // `node`\n\n  for (var n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf || esm_browser_stringify(b);\n}\n\n/* harmony default export */ const esm_browser_v1 = (v1);\n;// CONCATENATED MODULE: ./node_modules/uuid/dist/esm-browser/parse.js\n\n\nfunction parse(uuid) {\n  if (!esm_browser_validate(uuid)) {\n    throw TypeError('Invalid UUID');\n  }\n\n  var v;\n  var arr = new Uint8Array(16); // Parse ########-....-....-....-............\n\n  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;\n  arr[1] = v >>> 16 & 0xff;\n  arr[2] = v >>> 8 & 0xff;\n  arr[3] = v & 0xff; // Parse ........-####-....-....-............\n\n  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;\n  arr[5] = v & 0xff; // Parse ........-....-####-....-............\n\n  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;\n  arr[7] = v & 0xff; // Parse ........-....-....-####-............\n\n  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;\n  arr[9] = v & 0xff; // Parse ........-....-....-....-############\n  // (Use \"/\" to avoid 32-bit truncation when bit-shifting high-order bytes)\n\n  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;\n  arr[11] = v / 0x100000000 & 0xff;\n  arr[12] = v >>> 24 & 0xff;\n  arr[13] = v >>> 16 & 0xff;\n  arr[14] = v >>> 8 & 0xff;\n  arr[15] = v & 0xff;\n  return arr;\n}\n\n/* harmony default export */ const esm_browser_parse = (parse);\n;// CONCATENATED MODULE: ./node_modules/uuid/dist/esm-browser/v35.js\n\n\n\nfunction stringToBytes(str) {\n  str = unescape(encodeURIComponent(str)); // UTF8 escape\n\n  var bytes = [];\n\n  for (var i = 0; i < str.length; ++i) {\n    bytes.push(str.charCodeAt(i));\n  }\n\n  return bytes;\n}\n\nvar DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\nvar URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\n/* harmony default export */ function v35(name, version, hashfunc) {\n  function generateUUID(value, namespace, buf, offset) {\n    if (typeof value === 'string') {\n      value = stringToBytes(value);\n    }\n\n    if (typeof namespace === 'string') {\n      namespace = esm_browser_parse(namespace);\n    }\n\n    if (namespace.length !== 16) {\n      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');\n    } // Compute hash of namespace and value, Per 4.3\n    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =\n    // hashfunc([...namespace, ... value])`\n\n\n    var bytes = new Uint8Array(16 + value.length);\n    bytes.set(namespace);\n    bytes.set(value, namespace.length);\n    bytes = hashfunc(bytes);\n    bytes[6] = bytes[6] & 0x0f | version;\n    bytes[8] = bytes[8] & 0x3f | 0x80;\n\n    if (buf) {\n      offset = offset || 0;\n\n      for (var i = 0; i < 16; ++i) {\n        buf[offset + i] = bytes[i];\n      }\n\n      return buf;\n    }\n\n    return esm_browser_stringify(bytes);\n  } // Function#name is not settable on some platforms (#270)\n\n\n  try {\n    generateUUID.name = name; // eslint-disable-next-line no-empty\n  } catch (err) {} // For CommonJS default export support\n\n\n  generateUUID.DNS = DNS;\n  generateUUID.URL = URL;\n  return generateUUID;\n}\n;// CONCATENATED MODULE: ./node_modules/uuid/dist/esm-browser/md5.js\n/*\n * Browser-compatible JavaScript MD5\n *\n * Modification of JavaScript MD5\n * https://github.com/blueimp/JavaScript-MD5\n *\n * Copyright 2011, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n *\n * Based on\n * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n * Digest Algorithm, as defined in RFC 1321.\n * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for more info.\n */\nfunction md5(bytes) {\n  if (typeof bytes === 'string') {\n    var msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = new Uint8Array(msg.length);\n\n    for (var i = 0; i < msg.length; ++i) {\n      bytes[i] = msg.charCodeAt(i);\n    }\n  }\n\n  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));\n}\n/*\n * Convert an array of little-endian words to an array of bytes\n */\n\n\nfunction md5ToHexEncodedArray(input) {\n  var output = [];\n  var length32 = input.length * 32;\n  var hexTab = '0123456789abcdef';\n\n  for (var i = 0; i < length32; i += 8) {\n    var x = input[i >> 5] >>> i % 32 & 0xff;\n    var hex = parseInt(hexTab.charAt(x >>> 4 & 0x0f) + hexTab.charAt(x & 0x0f), 16);\n    output.push(hex);\n  }\n\n  return output;\n}\n/**\n * Calculate output length with padding and bit length\n */\n\n\nfunction getOutputLength(inputLength8) {\n  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;\n}\n/*\n * Calculate the MD5 of an array of little-endian words, and a bit length.\n */\n\n\nfunction wordsToMd5(x, len) {\n  /* append padding */\n  x[len >> 5] |= 0x80 << len % 32;\n  x[getOutputLength(len) - 1] = len;\n  var a = 1732584193;\n  var b = -271733879;\n  var c = -1732584194;\n  var d = 271733878;\n\n  for (var i = 0; i < x.length; i += 16) {\n    var olda = a;\n    var oldb = b;\n    var oldc = c;\n    var oldd = d;\n    a = md5ff(a, b, c, d, x[i], 7, -680876936);\n    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);\n    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);\n    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);\n    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);\n    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);\n    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);\n    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);\n    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);\n    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);\n    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);\n    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);\n    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);\n    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);\n    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);\n    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);\n    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);\n    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);\n    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);\n    b = md5gg(b, c, d, a, x[i], 20, -373897302);\n    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);\n    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);\n    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);\n    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);\n    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);\n    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);\n    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);\n    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);\n    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);\n    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);\n    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);\n    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);\n    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);\n    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);\n    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);\n    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);\n    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);\n    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);\n    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);\n    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);\n    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);\n    d = md5hh(d, a, b, c, x[i], 11, -358537222);\n    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);\n    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);\n    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);\n    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);\n    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);\n    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);\n    a = md5ii(a, b, c, d, x[i], 6, -198630844);\n    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);\n    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);\n    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);\n    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);\n    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);\n    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);\n    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);\n    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);\n    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);\n    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);\n    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);\n    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);\n    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);\n    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);\n    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);\n    a = safeAdd(a, olda);\n    b = safeAdd(b, oldb);\n    c = safeAdd(c, oldc);\n    d = safeAdd(d, oldd);\n  }\n\n  return [a, b, c, d];\n}\n/*\n * Convert an array bytes to an array of little-endian words\n * Characters >255 have their high-byte silently ignored.\n */\n\n\nfunction bytesToWords(input) {\n  if (input.length === 0) {\n    return [];\n  }\n\n  var length8 = input.length * 8;\n  var output = new Uint32Array(getOutputLength(length8));\n\n  for (var i = 0; i < length8; i += 8) {\n    output[i >> 5] |= (input[i / 8] & 0xff) << i % 32;\n  }\n\n  return output;\n}\n/*\n * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n * to work around bugs in some JS interpreters.\n */\n\n\nfunction safeAdd(x, y) {\n  var lsw = (x & 0xffff) + (y & 0xffff);\n  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n  return msw << 16 | lsw & 0xffff;\n}\n/*\n * Bitwise rotate a 32-bit number to the left.\n */\n\n\nfunction bitRotateLeft(num, cnt) {\n  return num << cnt | num >>> 32 - cnt;\n}\n/*\n * These functions implement the four basic operations the algorithm uses.\n */\n\n\nfunction md5cmn(q, a, b, x, s, t) {\n  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);\n}\n\nfunction md5ff(a, b, c, d, x, s, t) {\n  return md5cmn(b & c | ~b & d, a, b, x, s, t);\n}\n\nfunction md5gg(a, b, c, d, x, s, t) {\n  return md5cmn(b & d | c & ~d, a, b, x, s, t);\n}\n\nfunction md5hh(a, b, c, d, x, s, t) {\n  return md5cmn(b ^ c ^ d, a, b, x, s, t);\n}\n\nfunction md5ii(a, b, c, d, x, s, t) {\n  return md5cmn(c ^ (b | ~d), a, b, x, s, t);\n}\n\n/* harmony default export */ const esm_browser_md5 = (md5);\n;// CONCATENATED MODULE: ./node_modules/uuid/dist/esm-browser/v3.js\n\n\nvar v3 = v35('v3', 0x30, esm_browser_md5);\n/* harmony default export */ const esm_browser_v3 = (v3);\n;// CONCATENATED MODULE: ./node_modules/uuid/dist/esm-browser/v4.js\n\n\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return esm_browser_stringify(rnds);\n}\n\n/* harmony default export */ const esm_browser_v4 = (v4);\n;// CONCATENATED MODULE: ./node_modules/uuid/dist/esm-browser/sha1.js\n// Adapted from Chris Veness' SHA1 code at\n// http://www.movable-type.co.uk/scripts/sha1.html\nfunction f(s, x, y, z) {\n  switch (s) {\n    case 0:\n      return x & y ^ ~x & z;\n\n    case 1:\n      return x ^ y ^ z;\n\n    case 2:\n      return x & y ^ x & z ^ y & z;\n\n    case 3:\n      return x ^ y ^ z;\n  }\n}\n\nfunction ROTL(x, n) {\n  return x << n | x >>> 32 - n;\n}\n\nfunction sha1(bytes) {\n  var K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];\n  var H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\n\n  if (typeof bytes === 'string') {\n    var msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = [];\n\n    for (var i = 0; i < msg.length; ++i) {\n      bytes.push(msg.charCodeAt(i));\n    }\n  } else if (!Array.isArray(bytes)) {\n    // Convert Array-like to Array\n    bytes = Array.prototype.slice.call(bytes);\n  }\n\n  bytes.push(0x80);\n  var l = bytes.length / 4 + 2;\n  var N = Math.ceil(l / 16);\n  var M = new Array(N);\n\n  for (var _i = 0; _i < N; ++_i) {\n    var arr = new Uint32Array(16);\n\n    for (var j = 0; j < 16; ++j) {\n      arr[j] = bytes[_i * 64 + j * 4] << 24 | bytes[_i * 64 + j * 4 + 1] << 16 | bytes[_i * 64 + j * 4 + 2] << 8 | bytes[_i * 64 + j * 4 + 3];\n    }\n\n    M[_i] = arr;\n  }\n\n  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);\n  M[N - 1][14] = Math.floor(M[N - 1][14]);\n  M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;\n\n  for (var _i2 = 0; _i2 < N; ++_i2) {\n    var W = new Uint32Array(80);\n\n    for (var t = 0; t < 16; ++t) {\n      W[t] = M[_i2][t];\n    }\n\n    for (var _t = 16; _t < 80; ++_t) {\n      W[_t] = ROTL(W[_t - 3] ^ W[_t - 8] ^ W[_t - 14] ^ W[_t - 16], 1);\n    }\n\n    var a = H[0];\n    var b = H[1];\n    var c = H[2];\n    var d = H[3];\n    var e = H[4];\n\n    for (var _t2 = 0; _t2 < 80; ++_t2) {\n      var s = Math.floor(_t2 / 20);\n      var T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[_t2] >>> 0;\n      e = d;\n      d = c;\n      c = ROTL(b, 30) >>> 0;\n      b = a;\n      a = T;\n    }\n\n    H[0] = H[0] + a >>> 0;\n    H[1] = H[1] + b >>> 0;\n    H[2] = H[2] + c >>> 0;\n    H[3] = H[3] + d >>> 0;\n    H[4] = H[4] + e >>> 0;\n  }\n\n  return [H[0] >> 24 & 0xff, H[0] >> 16 & 0xff, H[0] >> 8 & 0xff, H[0] & 0xff, H[1] >> 24 & 0xff, H[1] >> 16 & 0xff, H[1] >> 8 & 0xff, H[1] & 0xff, H[2] >> 24 & 0xff, H[2] >> 16 & 0xff, H[2] >> 8 & 0xff, H[2] & 0xff, H[3] >> 24 & 0xff, H[3] >> 16 & 0xff, H[3] >> 8 & 0xff, H[3] & 0xff, H[4] >> 24 & 0xff, H[4] >> 16 & 0xff, H[4] >> 8 & 0xff, H[4] & 0xff];\n}\n\n/* harmony default export */ const esm_browser_sha1 = (sha1);\n;// CONCATENATED MODULE: ./node_modules/uuid/dist/esm-browser/v5.js\n\n\nvar v5 = v35('v5', 0x50, esm_browser_sha1);\n/* harmony default export */ const esm_browser_v5 = (v5);\n;// CONCATENATED MODULE: ./node_modules/uuid/dist/esm-browser/nil.js\n/* harmony default export */ const nil = ('00000000-0000-0000-0000-000000000000');\n;// CONCATENATED MODULE: ./node_modules/uuid/dist/esm-browser/version.js\n\n\nfunction version(uuid) {\n  if (!esm_browser_validate(uuid)) {\n    throw TypeError('Invalid UUID');\n  }\n\n  return parseInt(uuid.substr(14, 1), 16);\n}\n\n/* harmony default export */ const esm_browser_version = (version);\n;// CONCATENATED MODULE: ./node_modules/uuid/dist/esm-browser/index.js\n\n\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///614\n")},892:I=>{I.exports=__WEBPACK_EXTERNAL_MODULE__892__}},__webpack_module_cache__={};function __webpack_require__(I){var B=__webpack_module_cache__[I];if(void 0!==B)return B.exports;var n=__webpack_module_cache__[I]={exports:{}};return __webpack_modules__[I].call(n.exports,n,n.exports,__webpack_require__),n.exports}__webpack_require__.d=(I,B)=>{for(var n in B)__webpack_require__.o(B,n)&&!__webpack_require__.o(I,n)&&Object.defineProperty(I,n,{enumerable:!0,get:B[n]})},__webpack_require__.o=(I,B)=>Object.prototype.hasOwnProperty.call(I,B),__webpack_require__.r=I=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(I,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(I,"__esModule",{value:!0})};var __webpack_exports__=__webpack_require__(607);return __webpack_exports__=__webpack_exports__.default,__webpack_exports__})()));